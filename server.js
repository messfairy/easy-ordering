var express = require('express');
var app = express();

app.use(express.static(__dirname));
app.listen(3000);

讲清楚规范的设计意图和好处
写一些不好的栗子

1. 通用规范与原则

变量作用域
不使用全局变量，缩小变量作用范围，对象状态通过成员属性维护

this作用域传递

弱类型

闭包
   不要通过闭包共享类外的变量
   方法内共享用闭包，方法外共享用成员变量
   
不要使用for in用forInEach

高內聚低耦合（对照代码重点讲），高扇入低扇出

减少变化，封装不变的部分
   减少分支判断
   面向对象抽象

2. 特有规范

模块定义规范
   模块路径，hae.define

类定义规范
   一个类一个模块
   多继承和单继承

bean定义规范，配置规范

bean注入规范

视图bean渲染定义规范

mve
model即store，维护数据状态，绑定其他store的变化
view绑定用户操作和其他view消息，一般不要维护状态，状态以store为准
少调用其他view的api，监听其他视图的消息要精简

消息和事件使用规范
原则：尽量少绑定消息，多用代理
例如相似的事件绑定一个即可，通过发送的参数加以区别
注意：绑定事件对象的销毁，dom事件和消息绑定解除
不要拿到别人的引用发消息，而应该由别人注册消息，自己发布
讲一个例外。。。

面向业务的数据集store规范

共享内存
原则：一般不会有太多共享状态需要维护，尽量少用共享，我开发的功能未用到过. 共享相当于全局变量。推荐业务store的方式维护状态，相当于局部变量

单元测试规范

下一节，概要设计
类图
流程图
支持profile
插件
注入array[1]自动转为对象
aop实现
关闭所有页面时，检查是否有dom事件遗留